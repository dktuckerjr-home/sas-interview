Test Plan for addition of increment to "PROC CODEIT"

Questions to be answered by Development:

1. What are the upper and lower limits for start, stop and increment?
2. Are there default values for start, stop and increment (assumed to be 1)?
3. What are typical values for start, stop and increment?
4. Can the loop be made to run in reverse? That is, can it run from stop to
   start (at least logically)?
5. Is any bounds checking done by either the system or "PROC CODEIT"?
6. What means is to be used to verify that "PROC CODEIT" actually does what we
   intend? Are there logs or other means to know? If so, how are they obtained?
7. How are errors reported from "PROC CODEIT"? Logs? Exceptions?
8. In the statement "DO index = start TO stop ..." is stop actually the value
   of stop or is it stop - 1?

Testcases:
    # 1. Verify that CODEIT works as before.
    1a. Verify that not specifying interval works as before.
    1b. Verify that specifying interval as 1 works as before.

    2. Verify that CODEIT works with minimums with multiple combinations.
    3. Verify that CODEIT works with maximums with multiple combinations.
    4. Verify that CODEIT works with typical values.
    5. Verify that CODEIT fails with minimum - 1.
    6. Verify that CODEIT fails with maximum + 1.
    7. Verify that CODEIT works with an interval greater than the range of
       start to stop.
    8. Verify that CODEIT works with an interval equal to the range of start to
       stop.


Example Testcase:

All testcases will make use of the following procedure to call "PROC CODEIT"
and verify the results.

PROC TEST_CODEIT(start, stop, interval, rows)
    IF start > stop
        LET expected_rows = 0
    ELSE
        LET expected_rows = INT((stop - start + 1) / interval)

    # 1. Begin handling errors and gathering whatever information to be used to
    #    determine whether "PROC CODEIT" worked.
    IF interval is not NULL
        CALL CODE_IT(start, stop, interval)
    ELSE
        CALL CODE_IT(start, stop)

    # 2. Stop error handling and collection from 1 above.
    # 3. Handle any errors (which leads to a test failure).
    LET pass = FALSE
    IF collected_errors == 0
        LET pass = TRUE

        # 4. Use collection to determine the number of rows generated.
        # 4a. Depending of the granularity of the information, it may be
        #     possible to verify that the expected row numbers were generated. For
        #     example, if start = 1, stop = 10, and interval = 2, the sequence would
        #     be 1, 3, 5, 7, 9.
        LET rows_found = from_collection

        IF rows_found != rows_found
            LET pass = FALSE

    RETURN PASS

PROC TESTSUITE_CODEIT
    LET passed = 0
    LET failed = 0

    # test 1a
    LET pass = CALL TEST_CODEIT(0, 10, NULL)
    IF pass
        LET passed = passed + 1
    ELSE
        LET failed = failed + 1

    # test 1b
    LET pass = CALL TEST_CODEIT(0, 10, 1)
    IF pass
        LET passed = passed + 1
    ELSE
        LET failed = failed + 1

